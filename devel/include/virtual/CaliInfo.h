// Generated by gencpp from file virtual/CaliInfo.msg
// DO NOT EDIT!


#ifndef VIRTUAL_MESSAGE_CALIINFO_H
#define VIRTUAL_MESSAGE_CALIINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace virtual
{
template <class ContainerAllocator>
struct CaliInfo_
{
  typedef CaliInfo_<ContainerAllocator> Type;

  CaliInfo_()
    : marker(0)
    , markerincamera_measure()
    , markerincamera_truth()
    , eeinbase()
    , baseincamera()
    , markerinee()  {
    }
  CaliInfo_(const ContainerAllocator& _alloc)
    : marker(0)
    , markerincamera_measure(_alloc)
    , markerincamera_truth(_alloc)
    , eeinbase(_alloc)
    , baseincamera(_alloc)
    , markerinee(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _marker_type;
  _marker_type marker;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _markerincamera_measure_type;
  _markerincamera_measure_type markerincamera_measure;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _markerincamera_truth_type;
  _markerincamera_truth_type markerincamera_truth;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _eeinbase_type;
  _eeinbase_type eeinbase;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _baseincamera_type;
  _baseincamera_type baseincamera;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _markerinee_type;
  _markerinee_type markerinee;





  typedef boost::shared_ptr< ::virtual::CaliInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::virtual::CaliInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CaliInfo_

typedef ::virtual::CaliInfo_<std::allocator<void> > CaliInfo;

typedef boost::shared_ptr< ::virtual::CaliInfo > CaliInfoPtr;
typedef boost::shared_ptr< ::virtual::CaliInfo const> CaliInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::virtual::CaliInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::virtual::CaliInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::virtual::CaliInfo_<ContainerAllocator1> & lhs, const ::virtual::CaliInfo_<ContainerAllocator2> & rhs)
{
  return lhs.marker == rhs.marker &&
    lhs.markerincamera_measure == rhs.markerincamera_measure &&
    lhs.markerincamera_truth == rhs.markerincamera_truth &&
    lhs.eeinbase == rhs.eeinbase &&
    lhs.baseincamera == rhs.baseincamera &&
    lhs.markerinee == rhs.markerinee;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::virtual::CaliInfo_<ContainerAllocator1> & lhs, const ::virtual::CaliInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace virtual

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::virtual::CaliInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::virtual::CaliInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::virtual::CaliInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::virtual::CaliInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::virtual::CaliInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::virtual::CaliInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::virtual::CaliInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa331633c72b6e8b9017db2e4147569d";
  }

  static const char* value(const ::virtual::CaliInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa331633c72b6e8bULL;
  static const uint64_t static_value2 = 0x9017db2e4147569dULL;
};

template<class ContainerAllocator>
struct DataType< ::virtual::CaliInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "virtual/CaliInfo";
  }

  static const char* value(const ::virtual::CaliInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::virtual::CaliInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 marker\n"
"float64[] markerincamera_measure\n"
"float64[] markerincamera_truth\n"
"float64[] eeinbase\n"
"float64[] baseincamera\n"
"float64[] markerinee\n"
;
  }

  static const char* value(const ::virtual::CaliInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::virtual::CaliInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.marker);
      stream.next(m.markerincamera_measure);
      stream.next(m.markerincamera_truth);
      stream.next(m.eeinbase);
      stream.next(m.baseincamera);
      stream.next(m.markerinee);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CaliInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::virtual::CaliInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::virtual::CaliInfo_<ContainerAllocator>& v)
  {
    s << indent << "marker: ";
    Printer<int64_t>::stream(s, indent + "  ", v.marker);
    s << indent << "markerincamera_measure[]" << std::endl;
    for (size_t i = 0; i < v.markerincamera_measure.size(); ++i)
    {
      s << indent << "  markerincamera_measure[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.markerincamera_measure[i]);
    }
    s << indent << "markerincamera_truth[]" << std::endl;
    for (size_t i = 0; i < v.markerincamera_truth.size(); ++i)
    {
      s << indent << "  markerincamera_truth[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.markerincamera_truth[i]);
    }
    s << indent << "eeinbase[]" << std::endl;
    for (size_t i = 0; i < v.eeinbase.size(); ++i)
    {
      s << indent << "  eeinbase[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eeinbase[i]);
    }
    s << indent << "baseincamera[]" << std::endl;
    for (size_t i = 0; i < v.baseincamera.size(); ++i)
    {
      s << indent << "  baseincamera[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.baseincamera[i]);
    }
    s << indent << "markerinee[]" << std::endl;
    for (size_t i = 0; i < v.markerinee.size(); ++i)
    {
      s << indent << "  markerinee[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.markerinee[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VIRTUAL_MESSAGE_CALIINFO_H
